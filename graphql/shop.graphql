##########################################
# Queries
extend type Query @middleware(checks: ["projectToken"]) {
    products: [Product!]! @paginate(type: "paginator" model: "Tjventurini\\VoyagerShop\\Models\\Product")
    product(slug: String! @eq): Product! @find(model: "Tjventurini\\VoyagerShop\\Models\\Product")
    countries: [Country!]! @paginate(type: "paginator" model: "Tjventurini\\VoyagerShop\\Models\\Country")
    country(code: String! @eq): Country! @find(model: "Tjventurini\\VoyagerShop\\Models\\Country")
    taxes: [Tax!]! @paginate(type: "paginator" model: "Tjventurini\\VoyagerShop\\Models\\Tax")
    tax(id: ID!): Tax! @find(model: "Tjventurini\\VoyagerShop\\Models\\Tax")
    currencies: [Currency!]! @paginate(type: "paginator" model: "Tjventurini\\VoyagerShop\\Models\\Currency")
    currency(code: String! @eq): Currency! @find(model: "Tjventurini\\VoyagerShop\\Models\\Currency")
    # custom queries
    cart(token: String! @eq): Order! @find(model: "Tjventurini\\VoyagerShop\\Models\\Order") @middleware(checks: ["auth:api"])
    orders: [Order!] @middleware(checks: ["auth:api"])
    cards: [Card!] @middleware(checks: ["auth:api"])
}

##########################################
# Mutations
extend type Mutation @middleware(checks: ["projectToken", "auth:api"]) {
    createCart: Order!
    addToCart(token: String!, item: ID!, quantity: Int): Order!
    removeFromCart(token: String! item: ID!): Order!
    updateCart(token: String! item: ID! quantity: Int!): Order!
    savePaymentMethod(stripe_id: String!, brand: String!, last_four: String!, name: String): Card!
    removePaymentMethod(stripe_id: String!): [Card!]!
    charge(description: String! amount: Int! stripe_id: String currency: String): Payment!
    order(token: String item: ID stripe_id: String currency: String): Payment!
    setBillingAddress(token: String! id: ID name: String! street: String! zip: String! country: String!): Order!
    setShippingAddress(token: String! id: ID name: String! street: String! zip: String! country: String!): Order!
    updateOrCreateAddress(name: String! street: String! zip: String! country: String!): Address!
    deleteAddress(id: ID!): [Address!]!
}

##########################################
# Types
type Payment {
    id: String!
    amount: Int!
    currency: String!
}
type Card {
    stripe_id: String!
    name: String!
    brand: String!
    last_four: String!
    project: Project! @belongsTo
    user: User! @belongsTo
    created_at: DateTime!
    updated_at: DateTime
}
type Product {
    id: ID!
    name: String!
    slug: String!
    description: String
    includes_tax: Boolean!
    tax: Tax! @belongsTo
    tags: [Tag!]! @belongsToMany
    project: Project! @belongsTo
    productVariants: [ProductVariant!]! @hasMany
    created_at: DateTime!
    updated_at: DateTime
}
type ProductVariant {
    id: ID!
    name: String!
    details: String!
    price: Float!
    price_net: Float!
    price_gross: Float!
    product: Product! @belongsTo
    created_at: DateTime!
    updated_at: DateTime
}
type Country {
    id: ID!
    name: String!
    code: String!
    project: Project! @belongsTo
    addresses: [Address!]!
    created_at: DateTime!
    updated_at: DateTime
}
type Tax {
    id: ID!
    name: String!
    tax: Int!
    project: Project! @belongsTo
    country: Country! @belongsTo
    created_at: DateTime!
    updated_at: DateTime
}
type Currency {
    id: ID!
    name: String!
    code: String!
    sign: String!
    project: Project! @belongsTo
    country: Country! @belongsTo
    created_at: DateTime!
    updated_at: DateTime
}
type Order {
    token: String!
    state: String!
    user: User @belongsTo
    project: Project! @belongsTo
    orderItems: [OrderItem!]
    billingAddress: Address @belongsTo
    shippingAddress: Address @belongsTo
    created_at: DateTime!
    updated_at: DateTime
}
type OrderItem {
    order: Order! @belongsTo
    productVariant: ProductVariant! @belongsTo
    quantity: Int!
    price_net: Float!
    price_gross: Float!
    created_at: DateTime!
    updated_at: DateTime
}
type Address {
    id: ID!
    name: String!
    street: String!
    zip: String!
    project: Project! @belongsTo
    user: User! @belongsTo
    country: Country! @belongsTo
    created_at: DateTime!
    updated_at: DateTime
    deleted_at: DateTime
}
extend type User {
    orders: [Order!]! @hasMany
    addresses: [Address!]! @hasMany
}
extend type Project {
    products: [Product!]! @hasMany
    addresses: [Address!]! @hasMany
    orders: [Order!]! @hasMany
    cards: [Card!]! @hasMany
    currencies: [Currency!]! @hasMany
    taxes: [Tax!]! @hasMany
}
extend type Tag {
    products: [Product!]! @belongsToMany
}